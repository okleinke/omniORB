RELEASE NOTES
=============

This is omniORBpy 4.3.3.

See README.txt for building instructions.
See the documentation in the doc directory for more information.


Changes since omniORB 4.3.2
---------------------------

omniORBpy 4.3.3 is a bugfix release. See update.log for full details
of changes.


Changes since omniORB 4.3.1
---------------------------

omniORBpy 4.3.2 is mainly a bugfix release. See update.log for full
details of changes. Highlights include:

 - Fixed two cases of crashes due to invalid GIOP sent by buggy or
   malicious clients.

 - Other minor bug fixes.


Changes since omniORBpy 4.3.0
-----------------------------

omniORBpy 4.3.1 is mainly a bugfix release, with minor new features.

 - On Windows, support Python being installed in a path containing
   spaces.

 - Support for building with Python 3.11 and later.

 - Miscellaneous bug fixes. See update.log for details.


Changes since omniORBpy 4.2.x
-----------------------------

omniORBpy 4.3 has a number of new features and changes:

 - A new omniORB-specific HTTP / HTTPS transport, with a number of
   capabilities:

    . Full encapsulation of GIOP messages in HTTP.

    . Support for web proxies, transparent web proxies, reverse proxies.

    . For cases where security is important but an end-to-end HTTPS
      connection cannot be assured, support for in-message encryption.

 - New Connection Info callback to receive information about
   connection establishment and errors.

 - New omniORB.currentCallInfo() function to return information about
   the current server-side call.

 - Support for vast CORBA messages on 64 bit platforms.

 - Support for PyPy in omniidl and omniORBpy.


Changes since omniORB 4.1.x / omniORBpy 3.x
-------------------------------------------

omniORBpy 4.2 has a number of new features and changes compared to
omniORB 4.1.x / omniORBpy 3.x. Here are the highlights:

 - The omniORBpy version number now matches the core omniORB version
   number.

 - Full Asynchronous Method Invocation (AMI) support.

 - Support for ZIOP, which compresses large messages.

 - Call timeouts are indicated with the CORBA.TIMEOUT exception,
   rather than CORBA.TRANSIENT (unless suppressed with the
   throwTransientOnTimeout configuration parameter).

 - Servers can be limited to a range of ports to listen on.

 - When CORBA.BAD_PARAM is raised due to parameter types that do not
   match the IDL definitions, detailed information about the cause is
   now reported.

 - IDL attributes can now be accessed as properties of object
   references. i.e. IDL attribute 'example' can be accessed as
   obj.example as well as with obj._get_example() and
   obj._set_example().

 - Ancient Python versions are no longer supported. omniidl and
   omniORBpy now only work with Python 2.5 or later.



Known limitations
-----------------

This release has the following known limitations:

 - There is no support for DII and DSI. Since you can write IDL and
   Python code on-the-fly, this is not a significant limitation.

 - Interceptors have only limited functionality, and do not adhere to
   the portable interceptors API.

 - Local interfaces are not supported for user-defined IDL.
